{
  "hash": "dd426774525dee56985a4ed3f26b9231",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Installing and using R and RStudio\nauthor: John Robin Inston\ndate: \"2025-03-08\"\ncategories: [Data Science with R]\ntoc: true\n---\n\n\n\nThis post contains notes for Chapter 1 of my course series [Data Science with R](/courses/intro_to_data_science/index.qmd) covering how to install both the language R and the IDE RStudio, and the basics of using the IDE for data analysis.\n\n## Background Information\n\n`R` is a programming language (like python or C++) whilst **RStudio** is a software that facilitates writing R scripts known as an [Intergrated Development Enviroment (IDE)](https://en.wikipedia.org/wiki/Integrated_development_environment).  In this course we will learn how to write in the `R` language using the IDE RStudio.\n\n`R` can be used to perform and automate computations, generate plots, simulate from random variables and perform statistical analysis.  RStudio is primarily an R focussed IDE but it also has the capability of producing technical documents in a variety of formats using Quarto markdown.  This is something I discuss in my post [insert post].\n\n## Installation\n\n`R` is not natively loaded on your computer and so to begin with we need to install both the language and the IDE onto our computers, the downloads for which can be found on the [posit website](https://posit.co/download/rstudio-desktop/).  You will need to check that you download versions of both R and RStudio that match your operating system.\n\n![Posit website R and RStudio download screen.](posit_download.png)\n\nR will be loaded onto your local drive and can mostly be forgotten about.  RStudio will be downloaded into your applications folder and once the download is complete you can open the application to get started.\n\n## RStudio Layout\n\nWhen you first open RStudio the application will be split into several sections called **panes**, each with a selection of **tabs**. \n\n![RStudio Layout.](rstudio_layout.png)\n\nWe will first go through the most important tabs and what they are used for:\n\n1. **Left Pane:**\n\n    a. *Console Tab* - Where R code can be read and executed by your computer.\n\n    b. *Terminal Tab* - Providing command line access to the computer's operating system (this is rarely used by beginners).\n\n2. **Upper Right Pane:**\n\n    a. *Environment Tab* - A breakdown of items saved in the working memory.\n\n3. **Lower Right Pane:**\n\n    a. *Files Tab* - A view of your system files.\n\n    b. *Plots Tab* - A space displaying any plot you generate.\n\n    c. *Packages Tab* - A manager to load functions defined by other users known as **packages**.\n\n    d. *Help Tab* - A space to search for and view code documentation.\n\n## System vs Working Memory\n\nAnytime you define something in R (discussed in a later chapter) it will be saved to RStudios **working (short-term) memory**, shown in the environment tab.  The available memory is limited and it is important to remember that anything stored here will be deleted once you close RStudio.\n\nFor long term storage you will need to save objects to your **system memory** (your computers filing system), shown in the files tab.  You will then be able to load anything you have saved for later use.  In this course we will typically only use our system memory for saving our R scripts (text documents in which we write our code), accessing data files or for generating and saving .pdf documents.  \n\nRStudios **working environment** is the file on your system that RStudio is currently looking within (i.e. what it can pull files from and save files too).  The default working directory location is the file that is shown within the files tab.  You can set a new working directory at anytime by either:\n\n1. Navigating to the desired folder in the files tab, clicking on the more settings cog and selecting Set as Working Directory.\n\n2. Typing `setwd(\"desired_file_path\")` into the R console.\n\nIn the image below you can see that I have created a folder titled `Data Science with R` in my system `Documents` folder and set this as my working directory.\n\n![Set working directory,](working_directory.png)\n\n::: {.callout-tip}\n\n## Exercise 1\n\nLets prepare to create our first R script.  First navigate to your desired course folder (or create on) and set it as your working directory.\n:::\n\n## Creating R Scripts\n\nNow we are ready to create our first R script by using any of the following methods:\n\n1. Navigate to file > New File > R Script;\n\n2. Use the shortcut shift + cmd + N on mac;\n\n3. Click the small + button at the top left of the application window and select R Script.\n\n![Creating a new R Script.](new_script.png)\n\nAfter this a new pane will appear in the top left position showing an unititled document with the suffix `.R`.  We can save this file using either:\n\n1. The shortcut CMD + S;\n\n2. Clicking File > Save,\n\nand the document should then appear in our working directory, therefore in our system storage.\n\n![Saved script appearing in our working directory.](saved_script.png)\n\n::: {.callout-tip}\n\n## Exercise 2\n\nCreate and save your first R script (choose whatever name you like) to your working directory.\n:::\n\n## Packages\n\nR comes preloaded with a variety of functions, called **base functions** however there are many tasks for which they are insufficient (advanced plotting, statistical modelling etc.).  CRAN Packages are collections of functions written in `R` by other users that are available for download.  A comprehensive list of the available packages are detailed on the [CRAN website](https://cran.r-project.org/web/packages/available_packages_by_name.html).\n\nThroughout this course we will use a variety of packages (such as `tidyverse`) and so it is important we know how to load and use the in-built package management in RStudio.  navigating to the packages tab we will see a list of pre-installed packages with empty check marks next to them.  These packages are installed (downloaded from the internet) but not loaded (not available for use in our R session).\n\nTo install a package (e.g. `tidyverse`) we can use the `install.packages()` function where the input to the function is the name of the package enclosed in quotation marks:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('tidyverse')\n```\n:::\n\n\n\nYou will see the package appear with no check mark in the packages manager.  Note that once a package is installed it will not need to be installed in future unless you reinstall RStudio (which is why we often omit this code in scripts).\n\nNext, to load a package we can use the `library()`function where this time the input is the name of the package with no quotation marks:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nYour console output will often provide relevant information about the version of the package and its compatibility with your downloaded version of R and other loaded packages. Running this function will check the box next to `tidyverse` in the package tab. \n\n*I recommend including all your package loading functions at the top of your script so you can quickly check what packages you have loaded in your session.*\n\n![Package tab with loaded `tidyverse` package.](packages.png)\n\nOccasionally you might have loaded multiple packages which have conflicting package names.  In this case, you may want to unload a package which you can do using the `detach()` function.  The syntax for the input is a little more complicated:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(\"package:tidyverse\", unload = TRUE)\n```\n:::\n\n\n\n::: {.callout-tip}\n\n## Exercise 3\n\nBy writing code in your console install the packages: (1) `tidyverse`; (2) `astsa` and (3) `zoo`, using the `install.packages()` function.  Now in your script use the `library()` function to load all three packages.\n:::\n\n## Help Function\n\nOne of my most used functions in `R` is `?` which quickly loads to documentation for the specified function in the Help tab.  An example of using this function to return information about the base `mean()` function is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean()\n```\n:::\n\n\n\nIf you run this code you will see the documentation for the `mean()` function displayed in the Help tab.\n\n![Help function output for `mean()` function.](help.png)\n\n::: {.callout-tip}\n\n## Exercise 4\n\nIn the `tidyverse` function you have just loaded there is a function `ggplot()`.  Use the help `?` syntax to load and read the documentation.\n:::\n\n## Review\n\nAt the end of this short lesson we should now be able to:\n\n1. Download and install both R and RStudio.\n\n2. Set our working directory.\n\n3. Create new R scripts and save them.\n\n4. Install and load packages.\n\n5. Use the help function to search for documentation.\n\n<div style=\"display: flex; justify-content: space-between; padding: 20px 0;\">\n  <!-- Back Button -->\n  <a href=\"/courses/intro_to_data_science/index.qmd\" style=\"text-decoration: none; font-size: 18px;\">\n    &#8592; Course Homepage\n  </a>\n  \n  <!-- Forward Button -->\n  <a href=\"/posts/r_data_science_2/index.qmd\" style=\"text-decoration: none; font-size: 18px;\">\n    Next Chapter &#8594;\n  </a>\n</div>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}