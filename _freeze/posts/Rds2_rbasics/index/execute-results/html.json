{
  "hash": "ad589804847e48253b282c34f2820591",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: R Basics I (Operators, Logic & Data Types)\nauthor: John Robin Inston\ndate: \"2025-03-08\"\ncategories: [Data Science with R]\ntoc: true\n---\n\n\n\nThis post contains notes for Chapter 2 of my course series [Data Science with R](/courses/intro_to_data_science/index.qmd) covering the basic use of R as a calculator including computations, logic, data types and the assignment operator.\n\n## Calculations\n\nWe can perform a wide variety of mathematical calculations using `R` including:\n\n- Multiplication, addition, division, subtraction;\n- Raising to powers and square rooting;\n- Trigonometric functions;\n- Exponential and logarithmic functions.\n\nThe syntax to apply these operations is often very intuitive but slightly different to the mathematical notation.\n\n### Addition, Subtraction, Multiplication and Division\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Addition\n21 + 47 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 68\n```\n\n\n:::\n\n```{.r .cell-code}\n# Subtraction\n456 - 564 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -108\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiplication\n7*23      \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 161\n```\n\n\n:::\n\n```{.r .cell-code}\n# Division\n45/23     \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.956522\n```\n\n\n:::\n:::\n\n\n\n### Powers and Square Roots\n\nTo raise numbers to powers we can use the `^` symbol.  Note that if we wish to raise numbers to fractional powers we must ensure to enclose our fraction in parentheses `()`.  Further, there is a specifically defined function for computing the square root of a number `sqrt()`.\n\n::: {.callout-important}\n\nParentheses `()`, brackets `[]` and braces `{}` all have different uses in R and care should be taken to apply them correctly.\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Powers \n9^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 81\n```\n\n\n:::\n\n```{.r .cell-code}\n# Fractional Powers\n225^(1/2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\n# Square Root Function\nsqrt(225)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\n\n### Logarithms and Exponentials\n\nAs a quick reminder in mathematics we define the irrational number $e$ by\n$$\ne = 2.71828...\n$$\n\nThe **exponential function** $\\exp(\\cdot)$ is defined as\n$$\n\\exp(x) = e^x.\n$$\n\nThe inverse of this function is known as the **natural logarithm** $\\log(\\cdot)=\\ln(\\cdot)$ and is defined as the power of which $e$ will have to be raised to in order to give $x$.  It is therefore the inverse of the exponential function and satisfies\n$$\n\\exp(\\log(x)) = e^{\\log(x)} = x.\n$$\n\nFor a more indepth look at these functions and the results we use to perform calculations with them see my note on Log Laws.  To apply these functions in `R` we use the `exp()` and `log()` functions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exponential function\nexp(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.718282\n```\n\n\n:::\n\n```{.r .cell-code}\nexp(17)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24154953\n```\n\n\n:::\n\n```{.r .cell-code}\n# Log function\nlog(47)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.850148\n```\n\n\n:::\n\n```{.r .cell-code}\n# Inverse example\nlog(exp(47))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 47\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n## Exercise 1\n\nVerify the following mathematical computations in `R` using the operations above:\n\n1. $\\left(\\frac{\\log(49^2)}{\\exp(4)}\\right)^{1/3}=0.5223981$;\n\n2. $\\left(67+\\left(\\frac{12}{5} \\times \\frac{3}{12}\\right)\\right)^e+\\left(\\log(21) - \\sqrt{14}\\right)=94255.7$\n\n:::\n\n## Logic\n\n`R` can also handle logical inputs including:\n\n- `<` less than;\n- `<=` less than or equal to;\n- `>` greater than;\n- `>=` greater than or equal to;\n- `==` equal to;\n- `!=` not equal to;\n- `&` AND ($\\cap$ written mathematically);\n- `|` OR ($\\cup$ written mathematically).\n\nWe can write a logical expression and the return will note whether the statement was true or false.  For example, the output below is `FALSE` because the statement \"4 is greater than or equal to 5\" is false:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Logical example\n4 >= 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\nNote that to **combine** logical expressions we must use `&` or `|`!  For example, trying to evaluate `2 < 4 < 5` will result in an error message.\n\n## Data Types\n\nIf we were to save the output of the previous logical expression to an object `b` we would see in our environment tab that `b` is a **boolean** type.  `R` has the capacity to handle multiple data types including:\n\n1. Numeric - scalar numbers, vectors, matrices;\n2. Boolean / Logical - `TRUE` / `FALSE` output of some logical query;\n3. Character - Any number or character enclosed in `''` or `\"\"`.  \n\nA sequential collection of characters forms a string e.g. `\"datascience\"` but note that this is not a specific datatype in `R`.\n\n::: {.callout-tip}\n\n## Exercise 2\n\nWhat will the following logical queries output:\n\n1. `5 > 7`\n2. `10 <= 10`\n3. `13 != 12`\n4. `\"Hello\" >= \"Hell\"`\n5. `\"Hello\" != \"Hell\" | 5 < 4`\n6. 3 < 5 < 7 \n\n:::\n\n\n## Assignment Operator\n\nThe assignment operator `->` is used to define **objects** in `R`.  Objects can take many different forms from basic numbers to **vectors**, **matrices** or even **functions**, all of which we will cover in future sections.  For now, suppose we wish to store the results of some of the above computations for future use.  We can do so by applying the assignment oeprator:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define object a\na <- (log(49^2)/exp(4))^(1/3)\n```\n:::\n\n\n\nRunning this code you should see the object `a` appear in your `environment` tab and you might have noticed no result was printed in the console.  To print the value of `a` in your console you can either use the `print()` function or just call the object in your console:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print function\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5223981\n```\n\n\n:::\n\n```{.r .cell-code}\n# Call Object\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5223981\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n<div style=\"display: flex; justify-content: space-between; padding: 20px 0;\">\n  <!-- Back Button -->\n  <a href=\"/posts/Rds1_installation/index.qmd\" style=\"text-decoration: none; font-size: 18px;\">\n    &#8592; Previous Chapter\n  </a>\n  \n  <!-- Forward Button -->\n  <a href=\"/posts/Rds2_rbasics/index.qmd\" style=\"text-decoration: none; font-size: 18px;\">\n    Next Chapter &#8594;\n  </a>\n</div>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}